

def try_float(item, raise_error=False):
    #initialise raise_error to be able to check it later and get an eplanation of error

    """
    Tries to convert the item to float.

    Args:
        item: The item to be converted.
        raise_error: If True, raises ValueError on failure; otherwise, returns None.

    Returns:
        A float if conversion is successful, or None if not and raise_error is False.
    
    Raises:
        ValueError: If raise_error is True and conversion fails.
    """
    try:
        return float(item)
    except ValueError as e: #e a variable store the error msg generated by python
        if raise_error:
            raise ValueError(f"Invalid data format: {e}")
        return None #assigned None to keep the indexing of original list 

def load_data_from_csv(csv_file):
    """Reads a csv file and stores the data in a list.
    Args:
        csv_file: a string representing the file path to a csv file.
    Returns:
        A list of lists, where each sublist is a (non-empty) line in the csv file.
    """

    # data_list = [] #an empty list to store data
    # try:
    #     with open(csv_file, mode='r', newline='', encoding='utf-8') as file:
    #         csv_reader = csv.DictReader(file) #using dict to be readable
            
    #         for row in csv_reader:
    #             try:
    #                 date = row["date"]
    #                 min_temp = float(row["min"])
    #                 max_temp = float(row["max"])
    #                 data_list.append([date, min_temp, max_temp]) #each row will be a sublist of the data list
                
    #             except KeyError: #if there is a missing column
    #                 raise ValueError("Missing required columns in the CSV file.")
    #             except ValueError as e: #if we can't convert to float
    #                 raise ValueError(f"Invalid data format: {e}")
    
    # except FileNotFoundError: #if there is no file
    #     raise FileNotFoundError(f"The file at {csv_file} does not exist.")
    # except Exception as e: #any other error 
    #     raise Exception(f"An error occurred while reading the CSV file: {e}")

    # return data_list


    data_list = [] #an empty list to store data
    try:
        with open(csv_file, mode='r', newline='', encoding='utf-8') as file:
            csv_reader = csv.DictReader(file) #using dict to be readable
            
            for row in csv_reader:
                try:
                    date = row["date"]
                    min_temp = try_float(row["min"], raise_error=True)
                    max_temp = try_float(row["max"], raise_error=True)
                    data_list.append([date, min_temp, max_temp]) #each row will be a sublist of the data list
                
                except KeyError: #if there is a missing column
                    raise ValueError("Missing required columns in the CSV file.")
            
    except FileNotFoundError: #if there is no file
        raise FileNotFoundError(f"The file at {csv_file} does not exist.")
    except Exception as e: #any other error 
        raise Exception(f"An error occurred while reading the CSV file: {e}")

    return data_list