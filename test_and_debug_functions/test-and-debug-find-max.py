def try_float(item, raise_error=False): #this function will check our item and try to make it a float number where possible return None for non convertible, Filter empty strings or non-convertible elements like "carrot" while keep the indexing same  
    try:
        return float(item)
    except ValueError as e: #e a variable store the error msg generated by python
        if raise_error:
            raise ValueError(f"Invalid data format: {e}")
        return None #assigned None to keep the indexing of original list 

def find_max(weather_data):
    """Calculates the maximum value in a list of numbers.

    Args:
        weather_data: A list of numbers.
    Returns:
        The maximum value and it's position in the list. (In case of multiple matches, return the index of the *last* example in the list.)
    """
    
    weather_data = [try_float(item) for item in weather_data]

    # List comprehension to exclude None values so code can use max function on list
    valid_data = [item for item in weather_data if item is not None]

    if not valid_data:  # If all values are None, or the list is empty return empty tuple
        return ()

    max_value = max(valid_data)
    
    reversed_list = weather_data[::-1] #use weather_data to have correct index
    last_position = len(weather_data) - 1 - reversed_list.index(max_value)

    print(max_value , last_position)
    return (max_value , last_position)

temperatures1 = [49, 57, 56, 55, 53]
temperatures2 = [-10, -8, 2, -16, 4]
temperatures3 = [10.4, 14.5, 12.9, 8.9, 10.5, 11.7]
temperatures4 = ["49", "57", "56", "55", "53", "49"]
temperatures5 = []
temperatures6 = [49, 57, 56, 55, 57, 53, 49]
temperatures7 = [49, "57", 56, 55,0 ,0, 53, "49", "carrot", "57"]

find_max(temperatures7)